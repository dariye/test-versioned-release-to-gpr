name: Release client package

on:
  pull_request:
    paths:
      - "client-package/package.json"

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      working-directory: ./client-package

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 10
          registry-url: 'https://npm.pkg.github.com'

      - name: Get yarn cache location
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
        working-directory: ${{env.working-directory}}

      - name: Restore yarn cache
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn --frozen-lockfile --ignore-engines --ignore-optional --non-interactive --silent --ignore-scripts --production=false
        working-directory: ${{env.working-directory}}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GPR_TOKEN }}

      - name: Check package version
        uses: technote-space/package-version-check-action@v1
        id: check
        with:
          COMMIT_DISABLED: 1
          PACKAGE_DIR: ${{env.working-directory}}
          PACKAGE_NAME: ${{env.working-directory}}/package.json
          GITHUB_TOKEN: ${{ secrets.GPR_TOKEN }}

      # - name: Check if version has been updated
      #   id: check
      #   uses: EndBug/version-check@v1
      #   with:
      #     file-name: ${{env.working-directory}}/package.json
      #     token: ${{ secrets.GITHUB_TOKEN }}
      - name: Log
        if: always()
        run: echo ${{ steps.check.outputs.sha.description }}
        
      - name: Failure
        if: failure()
        run: echo "Failure"

      - name: Success
        if: success()
        run: echo "Success"
      

      - name: Version update detected
        if: steps.check.outputs.changed == 'true'
        run: 'echo "Version change found! New version: ${{ steps.check.outputs.version }} (${{ steps.check.outputs.type }})"'

      - name: Get all tags
        if: steps.check.outputs.changed == 'true'
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
        working-directory: ${{env.working-directory}}

      - name: Release notes
        if: steps.check.outputs.changed == 'true'
        id: release_notes
        run: |
          body=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s %h ")
          echo $body
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo "::set-output name=body::$body"
          echo "::set-output name=version::$(node -p 'require("./package.json").version')"
          npm config set '//npm.pkg.github.com/:_authToken' "${{ secrets.GITHUB_TOKEN }}"
          yarn release
        working-directory: ${{env.working-directory}}

      - name: New version detected, release package
        if: steps.check.outputs.changed == 'true'
        uses: actions/create-release@master
        with:
          tag_name: v${{ steps.release_notes.outputs.version }}
          release_name: Release ${{ steps.release_notes.outputs.version }}
          body: |
            ${{ steps.release_notes.outputs.body }}
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      - name: No change
        if: steps.check.outputs.changed != 'true'
        run: 'echo "No version change :/"'